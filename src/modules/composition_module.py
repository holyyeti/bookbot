from src.modules.analysis_module import AnalysisModule
from collections import Counter


class CompositionModule(AnalysisModule):
    """
    A module for analyzing the composition of a text by counting various parts of speech 
    such as adjectives, adverbs, nouns, verbs, and more.

    Inherits:
        AnalysisModule: The base class for all analysis modules.

    Attributes:
        analyzer (TextAnalyzer): An instance of the TextAnalyzer class that provides access 
                                 to the text data and related analysis methods.
    """
    
    def __init__(self, analyzer):
        """
        Initializes the CompositionModule with a reference to the analyzer.

        Args:
            analyzer (TextAnalyzer): The text analyzer instance containing the text and 
                                     methods for analysis.
        """
        super().__init__(analyzer)


    def get_most_common_word_frequencies(self) -> list:
        """
        Returns the 10 most common words in the preprocessed text along with their frequencies.

        Returns:
            list: A list of tuples where each tuple contains a word and its frequency.
        """
        return Counter(self.get_preprocessed_words()).most_common(10)


    def get_word_pos(self) -> list:
        """
        Performs part-of-speech (POS) tagging on the tokenized words.

        Returns:
            list: A list of tuples where each tuple contains a word and its POS tag.
        """
        return nltk.pos_tag(self.get_words())

    
    def get_wordnet_pos(self, tag) -> str:
        """
        Maps a POS tag to the appropriate WordNet POS tag.

        Args:
            tag (str): The POS tag to map.

        Returns:
            str: The corresponding WordNet POS tag.
        """
        if tag.startswith('J'):
            return wn.ADJ
        elif tag.startswith('V'):
            return wn.VERB
        elif tag.startswith('N'):
            return wn.NOUN
        elif tag.startswith('R'):
            return wn.ADV
        else:
            return None

    def analyze(self):
        """
        Performs the composition analysis by counting different parts of speech 
        (adjectives, adverbs, nouns, verbs, etc.) in the text.

        The method uses the word POS (part-of-speech) tags generated by the analyzer's 
        `get_word_pos` method and counts occurrences of specific POS tags.

        Returns:
            dict: A dictionary containing the counts of different parts of speech in the text, 
                  such as adjectives, adverbs, nouns, verbs, etc. The keys represent the type 
                  of POS (e.g., 'adjectives', 'adverbs'), and the values are the counts.
        """
        counts = Counter(tag for word, tag in self.analyzer.get_word_pos())
        adjective_count = counts['JJ']
        adverb_count = counts['RB'] + counts['RBR'] + counts['RBS'] + counts['WRB']
        conjunction_count = counts['CC'] + counts['IN']
        determiner_count = counts['DT']
        noun_count = counts['NN'] + counts['NNS']
        proper_noun_count = counts['NNP'] + counts['NNPS']
        preposition_count = counts['IN'] + counts['PP']
        pronoun_count = counts['PRP'] + counts['PRP$'] + counts['WP'] + counts['WP$']
        verb_count = counts['VBD'] + counts['VBG'] + counts['VBN'] + counts['VBP'] + counts['VBZ'] + counts['VP']
        text_composition_analysis = {
            'adjectives': adjective_count,
            'adverbs': adverb_count,
            'conjunctions': conjunction_count,
            'determiners': determiner_count,
            'nouns': noun_count,
            'proper_nouns': proper_noun_count,
            'prepositions': preposition_count,
            'pronouns': pronoun_count,
            'verbs': verb_count
        }        
        return text_composition_analysis